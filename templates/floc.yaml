{% macro render() %}{% include "floc.yaml"%}{% endmacro %}

# define constants and inputs
{% set q = q_plant %}
{% set Gt = 37000 %}
{% set hl = 40 * u.cm %}
{% set depth_end = 2 * u.m %}
{% set width_PVC_sheet = 1.067*u.m %}
{% set L = 10*u.m %}

# create a loop to iterate until the length of the entrance tank is within 1%
{% set A_ET_PV = 1 * u.m**3 %} # planview area of the entrance tank

{% for _ in range(1, 1000) %}
  # use design algorithm to calculate
  {% set vol_floc = floctest.vol_floc(q, hl, Gt, temp) %}
  {% set A_floc_PV = vol_floc/(depth_end + hl/2) %}
  {% set A_ETF_PV = A_ET_PV + A_floc_PV %}

  # calculate width of the flocculator channels and entrance tank
  {% set W_min = floctest.width_floc_min(q, hl, Gt, temp) %}
  {% set W_tot = A_ETF_PV/L %}
  {% set num_chan = floctest.num_channel(q, hl, Gt, temp, W_tot) %}
  {% set W_chan = W_tot/num_chan %}

  # calculate length of the entrance tank
  {%  %}

  # check how much A_ET_PV has changed
  {% A_new = L_ET*W_chan %}
  {% A_ratio = A_ET_PV/A_new %}
  {% if A_ratio < 1.01 and A_ratio > 0.99 %}{% break %}{% endif %}
  {% A_ET_PV = A_new %}
{% endfor %}

{% A_ET_PV = A_new %}

- ETF:
  - hp:
    - volume : {{ vol_ETF }}
  - ent_tank:
    - hp:
      - volume : {{ vol_ET }}
    - dp:
  - floc:
    - hp:
      - q : {{ q_plant }}
      - temp : {{ temp }}
      - Gt : {{ Gt }} # collision potential, now in optional_inputs
      - hl : {{ hl }} # headloss, now in optional_inputs
      - depth_end : {{ depth_end }} # depth of water at end of flocculator... will be set by sed tank
      - width_PVC_sheet : {{ width_PVC_sheet }} # this should be a constant in another template
      - volume : {{ vol_floc }}
    - dp:
      - L : {{ L }} # will be set by sed tank
      - W_min : {{ W_min }}
      - W_tot : {{W_tot}} # this need
      - num_chan : {{ num_chan }}
  - baffles:
    - hp:
